[["index.html", "Survey Data: Design and Examples Preamble Description Outline Prerequisites", " Survey Data: Design and Examples M. Ehsan Karim 2022-10-02 Preamble Description Surveys are designed to gather and assess national level health-related information. Usually governments collect these data, and make some effort to publish a version of the data for researchers to use. In this document, we will talk about various survey designs, some examples, how to download some of these data sources from Canadian and US sources. An example is included at the end regarding how to reproduce results from a paper that used one of these open data sources. Outline Review of Model-based Approach Introduction to Design-based Approach Complex survey design examples Canadian Community Health Survey - Annual Component (CCHS) Data import to R National Health and Nutrition Examination Survey (NHANES) Understanding NHANES data and documentation structure Data import to R Reproducing results from an article Version history Materials were updated over time through various deliveries of the content: Teaching materials for SPPH 504-007 (till 2021) Teaching materials for SPPH 604 (2022-) Prerequisites The prerequisites are knowledge of basic probability. Software demonstrations and codes will be provided in R, although proficiency in R is not required for understanding the concepts. If you are not familiar with R, and want to gain further understanding, I would suggest the following tutorial. R tutorial Karim ME, Hoang A and Qu Y “Introduction to R for health data analysis” URL: ehsanx.github.io/intro2R/ License The online version of this book is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. You may share, adapt the content and may distribute your contributions under the same license (CC BY-NC-SA 4.0), but you have to give appropriate credit, and cannot use material for the commercial purposes. How to cite Karim, ME (2022) “Survey Data: Design and Examples”, URL: ehsanx.github.io/SPPH504007SurveyData Comments For any comments regarding this document, reach out to me. "],["tab-3.html", "Chapter 1 Model-based Approach 1.1 Example 1.2 Research question 1.3 Data 1.4 Checking assumptions 1.5 Analysis 1.6 Verdict 1.7 Exercises (Optional)", " Chapter 1 Model-based Approach Review of regression analysis and ANOVA from pre-requisites (+ some extra concepts). Below we see an example of a random data generating process that depends on specification of a probability model. We assume that the population data was generated from a Normal distribution, and we are merely dealing with a sample. All our inferences (point estimate or hypothesis testing) will depend on how closely the data fulfill such assumption. We call such approach as ‘model-based’ approach. 1.1 Example Does plant weight increase with added nutrition? The following problem was taken from Exercise set 2.5 (2.1) from Dobson and Barnett (2008): “Genetically similar seeds are randomly assigned to be raised in either a nutritionally enriched environment (treatment group) or standard conditions (control group) using a completely randomized experimental design. After a predetermined time all plants are harvested, dried and weighed.” 1.2 Research question We want to test whether there is any difference in yield (weight) between the two groups plants from nutritionally enriched environment (treatment group) and plants from standard conditions (control group) 1.2.1 Notations Let \\(k\\) be the index of each plant, and \\(k = 1,...,20\\) for both groups. Let \\(j\\) be the index for groups. Here, \\(j = 1\\) for the treatment group (Trt), \\(j = 2\\) for the control group (Ctl). Let \\(Y_{jk}\\) denote the \\(k\\)th observation of weights in the \\(j\\)th group. 1.2.2 Assumptions Assume that the \\(Y_{jk}\\)’s are independent random variables with \\(Y_{jk} \\sim N(\\mu_j , \\sigma^2)\\). We also assume that the variances are homogenious, that is, \\({\\sigma_1}^2\\) and \\({\\sigma_2}^2\\) are not very different (and could be pooled to one single value of \\(\\sigma^2\\)). 1.2.3 Hypothesis The null hypothesis \\(H_0 : \\mu_1 = \\mu_2 = \\mu\\), that there is no difference, is to be compared with the alternative hypothesis \\(H_1 : \\mu_1 \\ne \\mu_2\\). 1.3 Data 1.3.1 Data table ctl &lt;- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14) trt &lt;- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69) length(ctl);length(trt) ## [1] 10 ## [1] 10 group &lt;- rep(c(&quot;Ctl&quot;,&quot;Trt&quot;), each = length(ctl)) group ## [1] &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Trt&quot; &quot;Trt&quot; ## [13] &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; &quot;Trt&quot; mode(group) ## [1] &quot;character&quot; weight &lt;- c(ctl, trt) weight ## [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14 4.81 4.17 4.41 3.59 5.87 ## [16] 3.83 6.03 4.89 4.32 4.69 mode(weight) ## [1] &quot;numeric&quot; Plant.Weight.Data &lt;- data.frame(group=group, weight = c(ctl, trt)) mode(Plant.Weight.Data) ## [1] &quot;list&quot; dim(Plant.Weight.Data) ## [1] 20 2 str(Plant.Weight.Data) ## &#39;data.frame&#39;: 20 obs. of 2 variables: ## $ group : chr &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; &quot;Ctl&quot; ... ## $ weight: num 4.17 5.58 5.18 6.11 4.5 4.61 5.17 4.53 5.33 5.14 ... The results, expressed in grams, for 20 plants in each group are shown in the following Table. library(DT) ## Warning: package &#39;DT&#39; was built under R version 4.2.1 datatable(Plant.Weight.Data) 1.3.2 Visualization boxplot(weight~ group,data=Plant.Weight.Data) weight.means &lt;- aggregate(weight ~ group, data=Plant.Weight.Data, FUN=mean) weight.means ## group weight ## 1 Ctl 5.032 ## 2 Trt 4.661 weight.medians &lt;- aggregate(weight ~ group, data=Plant.Weight.Data, FUN=median) weight.medians ## group weight ## 1 Ctl 5.155 ## 2 Trt 4.550 points(1:2, weight.means$weight, pch = &quot;*&quot;, col = &quot;blue&quot;) text(c(1:2)+0.25, weight.means$weight, labels = paste(&quot;Mean = &quot;, weight.means$weight), col = &quot;blue&quot;) text(c(1:2)-0.25, weight.means$weight, labels = paste(&quot;Median = &quot;,weight.medians$weight), col = &quot;black&quot;) Wait: so, plan weight reduces as we add nutrition? How confidently can we say that this added nutrition harmful for the plants (e.g., so that the weight will be reduced)? 1.4 Checking assumptions Test of normality of the outcomes (Shapiro-Wilk normality test): shapiro.test(Plant.Weight.Data$weight) ## ## Shapiro-Wilk normality test ## ## data: Plant.Weight.Data$weight ## W = 0.97311, p-value = 0.8187 Therefore, we cannot reject the null hypothesis that samples come from a population which has a normal distribution. Also check a normal quantile-quantile plot: qqnorm(Plant.Weight.Data$weight) qqline(Plant.Weight.Data$weight) Test of homogeneity of variances, that tests \\(H_0 : \\sigma_1 = \\sigma_2\\) vs. \\(H_1 : \\sigma_1 \\ne \\sigma_2\\): # SD from each groups tapply(Plant.Weight.Data$weight, INDEX = Plant.Weight.Data$group, FUN = sd) ## Ctl Trt ## 0.5830914 0.7936757 bartlett.test(weight ~ group, data = Plant.Weight.Data) # Bartlett&#39;s test ## ## Bartlett test of homogeneity of variances ## ## data: weight by group ## Bartlett&#39;s K-squared = 0.79805, df = 1, p-value = 0.3717 # leveneTest(weight ~ group, data = Plant.Weight.Data) # Levene&#39;s test 1.5 Analysis 1.5.1 Two-sample t-test A two-sample (independent) t-test compares the weights of control and treatment group as follows (assuming equal variance; judging from the IQR from the boxplots or the above Bartlett test): ttest&lt;- t.test(weight ~ group, data = Plant.Weight.Data, paired = FALSE, var.equal = TRUE) ttest ## ## Two Sample t-test ## ## data: weight by group ## t = 1.1913, df = 18, p-value = 0.249 ## alternative hypothesis: true difference in means between group Ctl and group Trt is not equal to 0 ## 95 percent confidence interval: ## -0.2833003 1.0253003 ## sample estimates: ## mean in group Ctl mean in group Trt ## 5.032 4.661 Here, we test \\(H_0 : \\mu_1 = \\mu_2 = \\mu\\) vs. \\(H_1 : \\mu_1 \\ne \\mu_2\\). ttest$statistic ## t ## 1.19126 1.5.2 Regression A simple linear model exploring the relationship between the plant weight and the group status can be fitted as follows: lm.group.including.intercept &lt;- lm(weight ~ 1 + group, data = Plant.Weight.Data) lm.group.including.intercept ## ## Call: ## lm(formula = weight ~ 1 + group, data = Plant.Weight.Data) ## ## Coefficients: ## (Intercept) groupTrt ## 5.032 -0.371 lm.group &lt;- lm(weight ~ group, data = Plant.Weight.Data) lm.group ## ## Call: ## lm(formula = weight ~ group, data = Plant.Weight.Data) ## ## Coefficients: ## (Intercept) groupTrt ## 5.032 -0.371 confint(lm.group) ## 2.5 % 97.5 % ## (Intercept) 4.56934 5.4946602 ## groupTrt -1.02530 0.2833003 1.5.2.1 Interpretation Note that the variable group is dummy coded. R generally chooses the first category as the reference category. levels(as.factor(Plant.Weight.Data$group)) ## [1] &quot;Ctl&quot; &quot;Trt&quot; In this case, the intercept 5.032 tells us the predicted mean value for the plant weights for the control group (reference category of the group variable). On the other hand, the slope in interpreted as the expected difference in the mean of the plant weights for that treatment group as compared to the control group. On average, weight is 0.371 units (lb?) lower in plants who are in the treatment condition compared to those in the control condition. 1.5.2.2 Summary of the regression fit The complete summary of the results is as follows: summary(lm.group) ## ## Call: ## lm(formula = weight ~ group, data = Plant.Weight.Data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0710 -0.4938 0.0685 0.2462 1.3690 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 5.0320 0.2202 22.850 9.55e-15 *** ## groupTrt -0.3710 0.3114 -1.191 0.249 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.6964 on 18 degrees of freedom ## Multiple R-squared: 0.07308, Adjusted R-squared: 0.02158 ## F-statistic: 1.419 on 1 and 18 DF, p-value: 0.249 This is testing a different hypothesis (from the table): \\(H_0: \\alpha = 0\\) vs. \\(H_1: \\alpha \\ne 0\\) (\\(\\alpha\\) being the intercept) and \\(H_0: \\beta = 0\\) vs. \\(H_1: \\beta \\ne 0\\) (\\(\\beta\\) being the slope). At the bottom of the summary output, the F-statistic tests \\(H_0: \\beta = 0\\) vs. \\(H_1: \\beta \\ne 0\\). This is an overall, and could accomodate more slopes if the regression had more slopes. E.g., for 2 slopes, this would have tested \\(H_0: \\beta_1 = \\beta_2 = 0\\). 1.5.2.3 Regression plot Let us visualize the scatter plot and the regression line: Plant.Weight.Data$group.code &lt;- ifelse(Plant.Weight.Data$group == &quot;Trt&quot;, 1, 0) Plant.Weight.Data$group.code ## [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 lm.code &lt;- lm(weight ~ group.code, data = Plant.Weight.Data) plot(weight ~ group.code, data = Plant.Weight.Data, axes = FALSE, xlab = &quot;Groups&quot;) axis(1, 0:1, levels(Plant.Weight.Data$group)) axis(2) abline(lm.code, col = &quot;blue&quot;) # regression line abline(h=coef(lm.code)[1], col = &quot;red&quot;) # intercept 1.5.2.4 Assumption checking for the residuals Checking normality of the residuals: lm.residual &lt;- residuals(lm.group) shapiro.test(lm.residual) ## ## Shapiro-Wilk normality test ## ## data: lm.residual ## W = 0.94744, p-value = 0.3299 qqnorm(lm.residual) qqline(lm.residual) 1.5.2.5 Null model A null model (with only intercept): lm.null &lt;- lm(weight ~ 1, data = Plant.Weight.Data) # Including just the intercept summary(lm.null) ## ## Call: ## lm(formula = weight ~ 1, data = Plant.Weight.Data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.2565 -0.4590 -0.0965 0.3710 1.2635 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 4.8465 0.1574 30.79 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.704 on 19 degrees of freedom 1.5.3 ANOVA For testing for the significance of the group membership, we can compare the current model to the null model (is adding the variable group in the model useful?). anova(lm.null,lm.group) ## Analysis of Variance Table ## ## Model 1: weight ~ 1 ## Model 2: weight ~ group ## Res.Df RSS Df Sum of Sq F Pr(&gt;F) ## 1 19 9.4175 ## 2 18 8.7292 1 0.68821 1.4191 0.249 Or, we could directly test \\(H_0 : \\mu_1 = \\mu_2 = \\mu\\) vs. \\(H_1 : \\mu_1 \\ne \\mu_2\\) under the homogeneity of variances assumption: anova(lm.group) ## Analysis of Variance Table ## ## Response: weight ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group 1 0.6882 0.68820 1.4191 0.249 ## Residuals 18 8.7292 0.48496 # Alternate ways to do the same # car::Anova(lm.group,type=&quot;II&quot;) aov.fit &lt;- aov(lm.group) summary(aov.fit) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## group 1 0.688 0.6882 1.419 0.249 ## Residuals 18 8.729 0.4850 # Multiple pairwise-comparison: # (compare with t-test; same p-value?) TukeyHSD(aov.fit) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = lm.group) ## ## $group ## diff lwr upr p adj ## Trt-Ctl -0.371 -1.0253 0.2833003 0.2490232 Checking normality of the residuals (not run; same as above): # aov.residual &lt;- residuals(aov.fit) # shapiro.test(aov.residual) # qqnorm(aov.residual) # qqline(aov.residual) ANOVA is basically a generalization of the two-sample t-test (verify that the calculated \\(F = t^2\\)): ttest$statistic^2 ## t ## 1.419101 An alternative non-parametric version of this independent 2-sample test is as follows (a Kruskal-Wallis rank sum test): # Assuming groups come from similar shaped populations: kruskal.test(weight ~ group, data = Plant.Weight.Data) ## ## Kruskal-Wallis rank sum test ## ## data: weight by group ## Kruskal-Wallis chi-squared = 1.7513, df = 1, p-value = 0.1857 1.6 Verdict 1.6.1 Informal conclusion With added nutrition, plant weights generally decrease (judging from the point estimate), but such trend could be due to sampling fluctuation (e.g., as the 95% confidence interval includes the null value of 0) and we can not confidently (not at least with 95% confidence) say that adding nutrition will cause plant weights to go down. 1.6.2 A word of caution Note that, we are inherently trying to infer ‘causality’ out of a statistical analysis, even though our hypothesis is not about ‘cause’ explicitly. Unfortunately, correlation does not imply causation, and we need to know more about the subject-area and study-design before we make such inference or interpretation. 1.7 Exercises (Optional) What is the difference between a regression analysis with a dummy coded predictor variable vs. an ANOVA? Was multiple pairwise-comparison (TukeyHSD) necessary in the above example? Which R package includes the leveneTest function? (hint: use help.search() function.) Is ‘multicollinearity’ an issue in the above example? In the current example, can we interpret the slope as follows: the change in Y for a 1-unit change in X where, \\(Y\\) being the outcome and \\(X\\) being the predictor? Why, or why not? "],["design-based-approach.html", "Chapter 2 Design-based Approach 2.1 Sampling 2.2 Statistical inference 2.3 Complex surveys 2.4 Other ideas 2.5 Further readings 2.6 Exercise", " Chapter 2 Design-based Approach Before discussing design-based approach, let us review some of concepts related to sampling. 2.1 Sampling 2.1.1 Steps of generalization Example: Let us consider CCHS. Target population: You think about a target population in you PICOT. Canadian population 12 years of age and over Sampling Frame: But all of your target population may not belong to a sampling frame compiled by a government. Canadian population 12 years of age and over exluding about 3% population (e.g., aboriginal settlements, canadian Forces, institutionalized, foster care, 2 selected Quebec health regions) Active Frame: People that are still reachable E.g., not dead or have not moved Sampling list Prepared from a specific sampling technique (SRS, stratified, cluster, complex) Actual sample: people that have responded some don’t respond Note that, results from ‘actual sample’ are generalized to the ‘active frame’. An inference from a sample may not really be generalizable to the target population (strictly speaking). 2.1.2 Types of sampling techniques Probability Non-probability 2.2 Statistical inference 2.2.1 Model-based Most of the statistical techniques we have seen in our pre-requisite courses (SPPH 400, 500) generally assumed that we are dealing with a sample that was obtained from an infinite population. We usually assume that a random process can approximate such data generation process, and the data was collected by a simple random sampling or SRS (everyone has equal opportunity to be selected in the sample). All our conclusions are based on such assumptions. If we are wrong in specifying correct distribution to approximate the data generating process, our subsequent inferences may not be valid anymore. 2.2.2 Design-based Generally, when wide-scale surveys are designed, simple random sampling or SRS may not be feasible for various practical considerations. May be researchers and policy-makers want that a special but small sub-group subjects should be included in our sample (e.g., people suffering from a rare disease), but it is possible that by a SRS scheme, none of the subject from that small subgroup will be included. For convenience of sampling, and for controlling variance, researchers may have to make desicions regarding how the survey needs to collect sample. Researchers may resort to cluster or stratified sampling; or a mix of both (trade-off between cost and precision). Unfortunately, in these cases, equal probability of being selected in the sample is not there any more. Lumley (2011) discussed the following properties for making design-based inference: properties needed to get valid estimates non-zero probability (\\(P_i&gt;0\\) for subject i) of being selected in the sample every subject has a known probability (\\(P_i\\)) of being seleted properties needed to acieve accuracy of those estimates Every pair of subjects must have a non-zero probability (\\(P_{ij}&gt;0\\) for subjects i and j) of being selected in the sample and that probability (\\(P_{ij}\\)) must be known as well. 2.3 Complex surveys 2.3.1 Design features 2.3.1.1 Stratification Considering sub-groups that are sufficiently different from each other with respect to characteristics. Usual examples: different geographical location: Manitoba vs. Nunavut high income vs. low income gender For each stratum (single unit), sampling is done separately. As we can select sample size from each stratum, we are able to control for variability of the estimates (SE) from each strata as well. Source: link 2.3.1.2 Clustering Clustering is done for convenience of data collection, generally. In a nationwide survey, researchers may choose to collect more samples from selected geographic locations. This is generally the case for cost considerations. In doing so, the surveyers don’t have to travel too far, as they could essentially get many neighboring subjects at a much lower cost. An obvious consequence could be that the neighboring subjects may be more correlated with each other compared to subjects who are selected by randomness. This may cause the observations not being independent anymore. Source: link 2.3.1.3 Weighting Assume that, in a SRS, a subject is selected in a sample with a probability of \\(p_i = 0.04\\). This mean, that person is representing \\((1/p_i) = (1/0.04) = 25\\) subjects in the population. We call this the sampling weight (\\(w_i = 25\\)). There are other type of weight: precision weight frequency weight but we are not really interested about those in this course in general. In a complex survey, where we have stratification and clustering, this weight is not as straight-forward becasue, then, it is coming from an unequal probability sampling. As a consequence, not all subjects in the population will have the same probability \\((p_i)\\) of being included in the sample, and the sampling weights (\\(w_i\\)) will vary as well (but the probability or weight is known for each subjects). 2.3.2 Design effect Compared to a SRS, all of the design features of a complex survey, such as, stratification, cluster sampling, and weighting generally influence the SEs of the estimates. Survey researchers use a ratio called design effect, to account for the difference in SEs between a complex survey versus a SRS: \\(DE^2 = \\frac{SE^2_{Complex.Survey}}{SE^2_{SRS}}\\). 2.4 Other ideas Oversampling 2.5 Further readings Available via UBC library: Chapter 2 of Heeringa, West, and Berglund (2017) Chapter 1 of Lumley (2011) Section 6.3 of Bilder and Loughin (2014) Chapter 12 of Vittinghoff et al. (2011) 2.6 Exercise Skim through the first chapter (from the further readings list). Should be easier to read most of it after this lecture. If any terminology remains unfamiliar, please discuss on Canvas. "],["potential-data-sources.html", "Chapter 3 Potential Data Sources 3.1 Survey data with features 3.2 Others", " Chapter 3 Potential Data Sources 3.1 Survey data with features Canadian Community Health Survey - Annual Component CCHS Download link UBC library National Health and Nutrition Examination Survey NHANES R packages to download data: nhanesA, RNHANES National Longitudinal Study of Adolescent to Adult Health [Add Health], 1994-2008 ICPSR 21600 European Social Survey ESS R package to download data: essurvey Behavioral Risk Factor Surveillance System BRFSS Bureau of Economic Analysis BEA US National Vital Statistics System NVSS 3.2 Others Vanderbilt Biostatistics Datasets link World Bank Open Data WBOD R packages to download data: wbstats, WDI "],["importing-cchs-to-r.html", "Chapter 4 Importing CCHS to R 4.1 Downloading CCHS data from UBC 4.2 Reading and Formatting the data 4.3 Processing data in R", " Chapter 4 Importing CCHS to R This is a short instruction document of how to get CCHS dataset from the UBC library site to your RStudio environment. Once we bring the dataset into RStudio, the next step is to think about creating analytic dataset. 4.1 Downloading CCHS data from UBC Step 1: Go to dvn.library.ubc.ca, and press ‘log-in’ Step 2: Select ‘UBC’ from the dropdown menu Step 3: Enter your CWL or UBC library authentication information Step 4: Once you log-in, search the term ‘cchs’ in the search-box Step 5: For illustrative purposes, let us work with the Cycle 3.1 of the CCHS dataset from the list of results. In that case, type ‘cchs 3.1’ Step 6: CCHS Cycle 3.1 information Step 7: Choose the ‘Data: CD’ from the menu Step 8: Download the entire data (about 159 MB) as a zip file Step 9: Accept the ‘terms of use’ Step 10: Select a directory to download the zip file. The path of the download directory is important (we need to use this path exactly later). For example, below we are in \"C:\\CCHS\\\" folder, but we will create a “Data” folder there, so that the download path is \"C:\\CCHS\\Data\\\". Step 11: Extract the zip file Step 12: Be patient with the extraction Step 13: Once extraction is complete, take a look at the folders inside. You will see that there is a folder named ‘SAS_SPSS’ 4.2 Reading and Formatting the data 4.2.1 Option 1: Processing data using SAS SAS is a commercial software. You may be able to get access to educational version. In case you don’t have access to it, later we outline how to use free packages to read these datasets. Step 1: Inside that ‘SAS_SPSS’ folder, find the file hs_pfe.sas. It is a long file, but we are going to work on part of it. First thing we want to do it to change all the directory names to where you have unzipped the downloaded file (for example, here the zip file was extracted to C:/CCHS/Data/cchs_cycle3-1CD/). We only need the first part of the code (as shown below; only related to data ‘hs’). Delete the rest of the codes for now. The resulting code should like like this: %include &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hs_pfe.sas&quot;; data hs; %let datafid=&quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\Data\\hs.txt&quot;; %include &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hs_i.sas&quot;; %include &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hs_fmt.sas&quot;; %include &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hs_lbe.sas&quot;; run; Once the modifications are done, submit the codes in SAS. Note that, the name of the data is ‘hs’. Step 2: Once you submit the code, you can check the log window in SAS to see how the code submission went. It should tell you how many observations and variables were read. Step 3: If you one to view the dataset, you can go to ‘Explorer’ window within SAS. Step 4: Generally, if you haven’t specified where to load the files, SAS will by default save the data into a library called ‘Work’ Step 5: Open that folder, and you will be able to find the dataset ‘Hs’. Step 6: Right click on the data, and click ‘open’ to view the datafile. Step 7: To export the data into a CSV format data (so that we can read this data into other software packages), ckick ‘Menu’. Step 8: then press ‘Export Data’. Step 9: choose the library and the data. Step 10: choose the format in which you may want to save the existing data. Step 11: also specify where you want to save the csv file and the name of that file (e.g., cchs3.csv). Step 12: go to that directory to see the file cchs3.csv Step 13: If you want to save the file in SAS format, you can do so by writing the following sas code into the ‘Editor’ window. Here we are saving the data Hs within the Work library in to a data called cchs3 within the SASLib library. Note that, the directory name has to be where you want to save the output file. LIBNAME SASLib &quot;C:\\CCHS\\Data&quot;; DATA SASLib.cchs3; set Work.Hs; run; Submit these codes into SAS: Step 13: go to that directory to see the file cchs3.sas7dbat 4.2.2 Option 2: Processing data using PSPP (Free) PSPP is a free package; alternative to commercial software SPSS. We can use the same SPSS codes to read the datafile into PSPP, and save. Step 1: Get the free PSPP software from the website: www.gnu.org/software/pspp/ PSPP is available for GNU/Hurd, GNU/Linux, Darwin (Mac OS X), OpenBSD, NetBSD, FreeBSD, and Windows For windows, download appropriate version. Download the file Install Click the icon shorcut after installing Step 2: Open PSPP Step 3: Go to ‘file’ menu and click ‘open’ Step 4: Specify the readfile.sps file from the ‘SAS_SPSS’ folder. You will see the following file: Step 5: Similar to before, change the directories as appropriate. Get rid of the extra lines of codes. Resulting codes are as follows (you can copy and replace the code in the file with the following codes): file handle infile/name = &#39;C:\\CCHS\\Data\\cchs_cycle3-1CD\\DATA\\hs.txt&#39;. data list file = infile notable/. include file = &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hs_i.sps&quot;. include file = &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hsvale.sps&quot;. include file = &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hsvare.sps&quot;. include file = &quot;C:\\CCHS\\Data\\cchs_cycle3-1CD\\SAS_SPSS\\Layouts\\hs\\hsmiss.sps&quot;. execute. For Mac users, it should be as follows (e.g., username should be your user name, if you are saving under the path \"/Users/username/CCHS/Data/\"): file handle infile/name =&quot;/Users/username/CCHS/Data/cchs_cycle3-1CD/Data/hs.txt&quot;. data list file = infile notable/. include file = &quot;/Users/username/CCHS/Data/cchs_cycle3-1CD/SAS_SPSS/Layouts/hs/hs_i.sps&quot;. include file = &quot;/Users/username/CCHS/Data/cchs_cycle3-1CD/SAS_SPSS/Layouts/hs/hsvale.sps&quot;. include file = &quot;/Users/username/CCHS/Data/cchs_cycle3-1CD/SAS_SPSS/Layouts/hs/hsvare.sps&quot;. include file = &quot;/Users/username/CCHS/Data/cchs_cycle3-1CD/SAS_SPSS/Layouts/hs/hsmiss.sps&quot;. execute. Step 6: Run the codes. Step 7: This is a large data, and will take some time to load the data into the PSPP data editor. Be patient. Once loading is complete, it will show the ‘output’ and ‘data view’. Note that, you will get error message, if your files were not in the correct path. In our example, the path was \"C:\\CCHS\\Data\\\" for the zip file content (see the previous steps). Step 7: You can also check the ‘variable view’. Step 8: Save the data by clicking ‘File’ and then ‘save as …’ Step 9: Specify the name of the datafile and the location / folder to save the data file. Step 10: See the SAV file saved in the directory. Step 11: To save CSV format data, use the following syntax. SAVE TRANSLATE /OUTFILE=&quot;C:/CCHS/Data/cchs3b.csv&quot; /TYPE=CSV /FIELDNAMES /CELLS=VALUES. Note that, for categorical data, you can either save values or labels. For our purpose, we prefer values, and hence saved with values here. Step 12: See the CSV file saved in the directory extracted from PSPP. 4.2.3 Option 3: Processing data using SPSS Log into ubc.onthehub.com to download SPSS. With your CWL account, UBC students should be able to download it. UBC IT website for SPSS says: The SPSS software license with UBC specifies that SPSS must only be used by UBC Faculty, Students, and Research Staff and only for Teaching and non-commercial Research purposes related to UBC. Both network (for UBC owened devices) or standalone / home versions (for non-UBC owened devices) should be available. Once downloaded, same process of importing CCHS data in PSPP can also be applied on SPSS (same syntax files should work). Let me know if that is not the case. 4.3 Processing data in R 4.3.1 Download software Step 1: Download either ‘R’ from CRAN www.r-project.org or ‘R open’ from Microsoft mran.microsoft.com/open Step 2: Download RStudio from www.rstudio.com/ Step 3: Open RStudio 4.3.2 Import, export and load data into R Step 1: Set working directory setwd(&quot;C:/CCHS/Data/&quot;) # or something appropriate Step 2: Read the dataset created from PSPP with cell values. We can also do a small check to see if the cell values are visible. For example, we choose a variable ‘CCCE_05A’, and tabulate it. Hs &lt;- read.csv(&quot;cchs3b.csv&quot;, header = TRUE) table(Hs$CCCE_05A) Step 3: Save the RData file from R into a folder SurveyData: save(Hs, file = &quot;SurveyData/cchs3.RData&quot;) Step 4: See the RData file saved in the directory extracted from R. Step 5: Close R / RStudio and restart it. Environment window within RStudio should be empty. Step 6: Load the saved RData into R. Environment window within RStudio should have ‘Hs’ dataset. load(&quot;SurveyData/cchs3.RData&quot;) "],["demystifying-nhanes.html", "Chapter 5 Demystifying NHANES 5.1 Overview 5.2 Survey history 5.3 NHANES datafile and documents 5.4 Exercise (web)", " Chapter 5 Demystifying NHANES 5.1 Overview National Center for Health Statistics (NCHS) has been conducting surveys combining interviews with health/laboratory and physical examination studies since 1959. The end-product, recently known as, National Health and Nutrition Examination Surveys (NHANES) provide cross-sectional data of the health and nutrition of the United States population. This information source has been central to formulating nationwide public health policies and practices. 5.2 Survey history Overall NHANES survey history 5.3 NHANES datafile and documents 5.3.1 File format The Continuous NHANES files are stored in the NHANES website as SAS transport file formats (.xpt). You can import this data in any statistical package that supports this file format. 5.3.2 Continuous NHANES Components Continuous NHANES components separated to reduce the amount of time to download and documentation size: 5.3.3 Public release excludes The following data have not been released on the NHANES website as public release files due to confidentiality concerns: adolescent data on alcohol use, smoking, sexual behavior, reproductive health and drug use 5.3.4 Combining data 5.3.4.1 Different cycles It is possible to combine datasets from different years/cycles together in NHANES. However, NHANES is a cross-sectional data, and identification of the same person accross different cycles is not possible in the public resease datasets. For appending data from different cycles, please make sure that the variable names/labels are the same/identical in years under consideration (in some years, names and labels do change). 5.3.4.2 Within the same cycle Within NHANES datasets in a given cycle, each sampled person has an unique identifier sequence number (variable SEQN) and therefore various data components: demographics, dietary, examination, laboratory and questionnaire within same cycle can be merged. 5.3.5 Missing data and outliers CDC (2018) recommends: “As a general rule, if 10% or less of your data for a variable are missing from your analytic dataset, it is usually acceptable to continue your analysis without further evaluation or adjustment. However, if more than 10% of the data for a variable are missing, you may need to determine whether the missing values are distributed equally across socio-demographic characteristics, and decide whether further imputation of missing values or use of adjusted weights are necessary.” “If you fail to identify ‘refusal’ or ‘do not know’ as types of missing data, and treat the assigned values for ‘refused’ or ‘do not know’ as real values, you will get distorted results in your statistical analyses. Therefore, it is important to recode ‘refused’ or ‘don’t know’ responses as missing values (either as a period (.) for numeric variables or as a blank for character variables).” “Outliers with extremely large weights could have an influential impact on your estimates. You will have to decide whether to keep these influential outliers in your analysis or not. It is up to the analysts to make that decision.” 5.3.6 NHANES documents 5.4 Exercise (web) More information about NHANES design Visit US CDC and do a variable keyword search based on your research interest (e.g., arthritis). "],["importing-nhanes-to-r.html", "Chapter 6 Importing NHANES to R 6.1 NHANES Dataset 6.2 Accessing NHANES Data", " Chapter 6 Importing NHANES to R This is a short instruction document of how to get NHANES dataset from the US CDC site to your RStudio environment. Once we bring the dataset into RStudio, the next step is to think about creating analytic dataset. 6.1 NHANES Dataset National Center for Health Statistics (NCHS) conducts National Health and Nutrition Examination Survey (NHANES) (CDC,NCHS (2018)). These surveys are designed to evaluate the health and nutritional status of U.S. adults and children. These surveys are being administered in two-year cycles or intervals starting from 1999-2000. Prior to 1999, a number of surveys were conducted (e.g., NHANES III), but in our discussion, we will mostly restrict our discussions to `continuous NHANES’ (e.g., NHANES 1999-2000 to NHANES 2017-2018). Witin the CDC website, continuous NHANES data are available in 5 categories: - Demographics - Dietary - Examination - Laboratory - Questionnaire 6.2 Accessing NHANES Data In the following example, we will see how to download ‘Demographics’ data, and check associated variable in that data. 6.2.1 Accessing NHANES Data Directly from the CDC website NHANES 1999-2000 and onward survey datasets are publicly available at wwwn.cdc.gov/nchs/nhanes/. Step 1: Say, for example, we are interested about NHANES 2015-2016 surveys. Clicking the associated link in the above Figure gets us to the page for the cirresponding cycle (see below). Step 2: There are various types of data available for this survey. Let’s explore the demographic information from this clycle. These data are mostly available in the form of SAS `XPT’ format (see below). Step 3: We can download the XPT data in the local PC folder and read the data into R as as follows: # install.packages(&quot;SASxport&quot;) require(SASxport) library(foreign) DEMO &lt;- read.xport(&quot;SurveyData\\\\DEMO_I.XPT&quot;) ## ## Attaching package: &#39;foreign&#39; ## The following objects are masked from &#39;package:SASxport&#39;: ## ## lookup.xport, read.xport Step 4: Once data is imported in RStudio, we will see the DEMO object listed under data window (see below): Step 5: We can also check the variable names in this DEMO dataset as follows: names(DEMO) ## [1] &quot;SEQN&quot; &quot;SDDSRVYR&quot; &quot;RIDSTATR&quot; &quot;RIAGENDR&quot; &quot;RIDAGEYR&quot; &quot;RIDAGEMN&quot; ## [7] &quot;RIDRETH1&quot; &quot;RIDRETH3&quot; &quot;RIDEXMON&quot; &quot;RIDEXAGM&quot; &quot;DMQMILIZ&quot; &quot;DMQADFC&quot; ## [13] &quot;DMDBORN4&quot; &quot;DMDCITZN&quot; &quot;DMDYRSUS&quot; &quot;DMDEDUC3&quot; &quot;DMDEDUC2&quot; &quot;DMDMARTL&quot; ## [19] &quot;RIDEXPRG&quot; &quot;SIALANG&quot; &quot;SIAPROXY&quot; &quot;SIAINTRP&quot; &quot;FIALANG&quot; &quot;FIAPROXY&quot; ## [25] &quot;FIAINTRP&quot; &quot;MIALANG&quot; &quot;MIAPROXY&quot; &quot;MIAINTRP&quot; &quot;AIALANGA&quot; &quot;DMDHHSIZ&quot; ## [31] &quot;DMDFMSIZ&quot; &quot;DMDHHSZA&quot; &quot;DMDHHSZB&quot; &quot;DMDHHSZE&quot; &quot;DMDHRGND&quot; &quot;DMDHRAGE&quot; ## [37] &quot;DMDHRBR4&quot; &quot;DMDHREDU&quot; &quot;DMDHRMAR&quot; &quot;DMDHSEDU&quot; &quot;WTINT2YR&quot; &quot;WTMEC2YR&quot; ## [43] &quot;SDMVPSU&quot; &quot;SDMVSTRA&quot; &quot;INDHHIN2&quot; &quot;INDFMIN2&quot; &quot;INDFMPIR&quot; Step 6: We can open the data in RStudio in the dataview window (by clicking the DEMO data from the data window). The next Figure shows only a few columns and rows from this large dataset. Note that there are some values marked as “NA”, which represents missing values. Step 7: There is a column name associated with each column, e.g., DMDHSEDU in the first column in the above Figure. To understand what the column names mean in this Figure, we need to take a look at the codebook. To access codebook, click the 'DEMO|Doc' link (in step 2). This will show the data documentation and associated codebook (see the next Figure). Step 8: We can see a link for the column or variable DMDHSEDU in the table of content (in the above Figure). Clicking that link will provide us further information about what this variable means (see the next Figure). Step 9: We can assess if the numbers reported under count and cumulative (from the above Figure) matches with what we get from the DEMO data we just imported (particularly, for the DMDHSEDU variable): table(DEMO$DMDHSEDU) ## ## 1 2 3 4 5 7 9 ## 619 511 980 1462 1629 2 23 cumsum(table(DEMO$DMDHSEDU)) ## 1 2 3 4 5 7 9 ## 619 1130 2110 3572 5201 5203 5226 length(is.na(DEMO$DMDHSEDU)) ## [1] 9971 6.2.2 Accessing NHANES Data Using R Packages 6.2.2.1 nhanesA nhanesA provides a convenient way to download and analyze NHANES survey data. #install.packages(&quot;nhanesA&quot;) library(nhanesA) Step 1: Witin the CDC website, NHANES data are available in 5 categories Demographics (DEMO) Dietary (DIET) Examination (EXAM) Laboratory (LAB) Questionnaire (Q) To get a list of available variables within a datafile, we run the following command (e.g., we check variable names within DEMO data): library(nhanesA) nhanesTables(data_group=&#39;DEMO&#39;, year=2015) ## Data.File.Name Data.File.Description ## 1 DEMO_I Demographic Variables and Sample Weights Step 2: We can obtain the summaries of the downloaded data as follows (see below): demo &lt;- nhanes(&#39;DEMO_I&#39;) names(demo) ## [1] &quot;SEQN&quot; &quot;SDDSRVYR&quot; &quot;RIDSTATR&quot; &quot;RIAGENDR&quot; &quot;RIDAGEYR&quot; &quot;RIDAGEMN&quot; ## [7] &quot;RIDRETH1&quot; &quot;RIDRETH3&quot; &quot;RIDEXMON&quot; &quot;RIDEXAGM&quot; &quot;DMQMILIZ&quot; &quot;DMQADFC&quot; ## [13] &quot;DMDBORN4&quot; &quot;DMDCITZN&quot; &quot;DMDYRSUS&quot; &quot;DMDEDUC3&quot; &quot;DMDEDUC2&quot; &quot;DMDMARTL&quot; ## [19] &quot;RIDEXPRG&quot; &quot;SIALANG&quot; &quot;SIAPROXY&quot; &quot;SIAINTRP&quot; &quot;FIALANG&quot; &quot;FIAPROXY&quot; ## [25] &quot;FIAINTRP&quot; &quot;MIALANG&quot; &quot;MIAPROXY&quot; &quot;MIAINTRP&quot; &quot;AIALANGA&quot; &quot;DMDHHSIZ&quot; ## [31] &quot;DMDFMSIZ&quot; &quot;DMDHHSZA&quot; &quot;DMDHHSZB&quot; &quot;DMDHHSZE&quot; &quot;DMDHRGND&quot; &quot;DMDHRAGE&quot; ## [37] &quot;DMDHRBR4&quot; &quot;DMDHREDU&quot; &quot;DMDHRMAR&quot; &quot;DMDHSEDU&quot; &quot;WTINT2YR&quot; &quot;WTMEC2YR&quot; ## [43] &quot;SDMVPSU&quot; &quot;SDMVSTRA&quot; &quot;INDHHIN2&quot; &quot;INDFMIN2&quot; &quot;INDFMPIR&quot; table(demo$DMDHSEDU) ## ## 1 2 3 4 5 7 9 ## 619 511 980 1462 1629 2 23 cumsum(table(demo$DMDHSEDU)) ## 1 2 3 4 5 7 9 ## 619 1130 2110 3572 5201 5203 5226 length(is.na(demo$DMDHSEDU)) ## [1] 9971 6.2.2.2 RNHANES RNHANES (Susmann (2016)) is another packages for downloading the NHANES data easily. Try yourself. "],["reproducing-results.html", "Chapter 7 Reproducing Results 7.1 Reproduce results from a JAMA article 7.2 Downloading relevant variables 7.3 Retain only useful variables 7.4 Merge dara 7.5 Applying eligibility criteria 7.6 Recoding variables 7.7 Reproducing Table 1", " Chapter 7 Reproducing Results 7.1 Reproduce results from a JAMA article 7.1.1 Article Let us use the article by Flegal et al. (2016) as our reference. DOI:10.1001/jama.2016.6458, or UBC access. 7.1.2 Task Our task here is to reproduce the numbers reported in Table 1 from this article. 7.1.3 Eligibility criteria Methods section from this article says: “For adults aged 20 years or older, obesity was defined according to clinical guidelines.” “Pregnant women were excluded from analysis.” “Participant age was grouped into categories of 20 to 39 years, 40 to 59 years, and 60 years and older.” Table 1 title says NHANES 2013-2014 was used. 7.1.4 Variables of interest Variables of interest: age (eligibility and stratifying variable) sex (stratifying variable) race (stratifying variable) pregnancy status (eligibility) obesity/BMI status (main variable of interest for the paper) 7.1.5 Searching for necessary variables Search these variables using the NHANES variable keyword search within the 2013-14 cycle: cdc.gov/nchs/nhanes/search/ Below is an example for BMI variable search: Identifying the component: Note that H is the index for 2013-14 cycle as seen in the picture: Identifying the variable: Rest of the variables all coming from demographic component 7.2 Downloading relevant variables 7.2.1 Demographic data We are using same H index for demographic. library(nhanesA) demo13 &lt;- nhanes(&#39;DEMO_H&#39;) Demo13 &lt;- nhanesTranslate(&#39;DEMO_H&#39;, names(demo13), data=demo13) ## No translation table is available for SEQN ## Translated columns: RIDSTATR RIAGENDR RIDRETH1 RIDRETH3 RIDEXMON DMQMILIZ DMQADFC DMDBORN4 DMDCITZN DMDYRSUS DMDEDUC3 DMDEDUC2 DMDMARTL RIDEXPRG SIALANG SIAPROXY SIAINTRP FIALANG FIAPROXY FIAINTRP MIALANG MIAPROXY MIAINTRP AIALANGA DMDHHSIZ DMDFMSIZ DMDHHSZA DMDHHSZB DMDHHSZE DMDHRGND DMDHRBR4 DMDHREDU DMDHRMAR DMDHSEDU INDHHIN2 INDFMIN2 7.2.2 Examination data We are using same H index for BMI. exam13 &lt;- nhanes(&#39;BMX_H&#39;) Exam13 &lt;- nhanesTranslate(&#39;BMX_H&#39;, names(exam13), data=exam13) ## No translation table is available for SEQN ## Translated columns: BMDSTATS BMIWT BMIHT BMDBMIC BMDSADCM See all the column names in the data names(Demo13) ## [1] &quot;SEQN&quot; &quot;SDDSRVYR&quot; &quot;RIDSTATR&quot; &quot;RIAGENDR&quot; &quot;RIDAGEYR&quot; &quot;RIDAGEMN&quot; ## [7] &quot;RIDRETH1&quot; &quot;RIDRETH3&quot; &quot;RIDEXMON&quot; &quot;RIDEXAGM&quot; &quot;DMQMILIZ&quot; &quot;DMQADFC&quot; ## [13] &quot;DMDBORN4&quot; &quot;DMDCITZN&quot; &quot;DMDYRSUS&quot; &quot;DMDEDUC3&quot; &quot;DMDEDUC2&quot; &quot;DMDMARTL&quot; ## [19] &quot;RIDEXPRG&quot; &quot;SIALANG&quot; &quot;SIAPROXY&quot; &quot;SIAINTRP&quot; &quot;FIALANG&quot; &quot;FIAPROXY&quot; ## [25] &quot;FIAINTRP&quot; &quot;MIALANG&quot; &quot;MIAPROXY&quot; &quot;MIAINTRP&quot; &quot;AIALANGA&quot; &quot;DMDHHSIZ&quot; ## [31] &quot;DMDFMSIZ&quot; &quot;DMDHHSZA&quot; &quot;DMDHHSZB&quot; &quot;DMDHHSZE&quot; &quot;DMDHRGND&quot; &quot;DMDHRAGE&quot; ## [37] &quot;DMDHRBR4&quot; &quot;DMDHREDU&quot; &quot;DMDHRMAR&quot; &quot;DMDHSEDU&quot; &quot;WTINT2YR&quot; &quot;WTMEC2YR&quot; ## [43] &quot;SDMVPSU&quot; &quot;SDMVSTRA&quot; &quot;INDHHIN2&quot; &quot;INDFMIN2&quot; &quot;INDFMPIR&quot; names(Exam13) ## [1] &quot;SEQN&quot; &quot;BMDSTATS&quot; &quot;BMXWT&quot; &quot;BMIWT&quot; &quot;BMXRECUM&quot; &quot;BMIRECUM&quot; ## [7] &quot;BMXHEAD&quot; &quot;BMIHEAD&quot; &quot;BMXHT&quot; &quot;BMIHT&quot; &quot;BMXBMI&quot; &quot;BMDBMIC&quot; ## [13] &quot;BMXLEG&quot; &quot;BMILEG&quot; &quot;BMXARML&quot; &quot;BMIARML&quot; &quot;BMXARMC&quot; &quot;BMIARMC&quot; ## [19] &quot;BMXWAIST&quot; &quot;BMIWAIST&quot; &quot;BMXSAD1&quot; &quot;BMXSAD2&quot; &quot;BMXSAD3&quot; &quot;BMXSAD4&quot; ## [25] &quot;BMDAVSAD&quot; &quot;BMDSADCM&quot; 7.3 Retain only useful variables demo13select &lt;- Demo13[c(&quot;SEQN&quot;, # Respondent sequence number &quot;RIDEXPRG&quot;, # Pregnancy status at exam &quot;RIAGENDR&quot;, # Gender &quot;RIDAGEYR&quot;, # Age in years at screening &quot;RIDRETH3&quot;)] # Race/Hispanic origin w/ NH Asian exam13select &lt;- Exam13[c(&quot;SEQN&quot;, # Respondent sequence number &quot;BMXBMI&quot;)] # Body Mass Index (kg/m**2) 7.3.1 Quick pick at the data head(demo13select) ## SEQN RIDEXPRG RIAGENDR RIDAGEYR RIDRETH3 ## 1 73557 &lt;NA&gt; Male 69 Non-Hispanic Black ## 2 73558 &lt;NA&gt; Male 54 Non-Hispanic White ## 3 73559 &lt;NA&gt; Male 72 Non-Hispanic White ## 4 73560 &lt;NA&gt; Male 9 Non-Hispanic White ## 5 73561 &lt;NA&gt; Female 73 Non-Hispanic White ## 6 73562 &lt;NA&gt; Male 56 Mexican American head(exam13select) ## SEQN BMXBMI ## 1 73557 26.7 ## 2 73558 28.6 ## 3 73559 28.9 ## 4 73560 17.1 ## 5 73561 19.7 ## 6 73562 41.7 7.4 Merge dara Use the ID variable SEQN to merge both data: merged.data &lt;- merge(demo13select, exam13select, by = c(&quot;SEQN&quot;), all=TRUE) head(merged.data) ## SEQN RIDEXPRG RIAGENDR RIDAGEYR RIDRETH3 BMXBMI ## 1 73557 &lt;NA&gt; Male 69 Non-Hispanic Black 26.7 ## 2 73558 &lt;NA&gt; Male 54 Non-Hispanic White 28.6 ## 3 73559 &lt;NA&gt; Male 72 Non-Hispanic White 28.9 ## 4 73560 &lt;NA&gt; Male 9 Non-Hispanic White 17.1 ## 5 73561 &lt;NA&gt; Female 73 Non-Hispanic White 19.7 ## 6 73562 &lt;NA&gt; Male 56 Mexican American 41.7 dim(merged.data) ## [1] 10175 6 merged.data$SEQN &lt;- NULL 7.4.1 Investigate merged data Missing data available? require(tableone) ## Loading required package: tableone ## Warning: package &#39;tableone&#39; was built under R version 4.2.1 tab_nhanes &lt;- CreateTableOne(data=merged.data, includeNA = TRUE) print(tab_nhanes, showAllLevels = TRUE) ## ## level Overall ## n 10175 ## RIDEXPRG (%) Yes, positive lab pregnancy test 65 ( 0.6) ## The participant was not pregnant 1150 (11.3) ## Cannot ascertain if the particip 94 ( 0.9) ## &lt;NA&gt; 8866 (87.1) ## RIAGENDR (%) Male 5003 (49.2) ## Female 5172 (50.8) ## RIDAGEYR (mean (SD)) 31.48 (24.42) ## RIDRETH3 (%) Mexican American 1730 (17.0) ## Other Hispanic 960 ( 9.4) ## Non-Hispanic White 3674 (36.1) ## Non-Hispanic Black 2267 (22.3) ## Non-Hispanic Asian 1074 (10.6) ## Other Race - Including Multi-Rac 470 ( 4.6) ## BMXBMI (mean (SD)) 25.68 (7.96) summary(merged.data$BMXBMI) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## 12.10 19.70 24.70 25.68 30.20 82.90 1120 7.5 Applying eligibility criteria We subset the data using criteria similar to the JAMA paper by Flegal et al. (2016) (see above) analytic.data1 &lt;- subset(merged.data, !is.na(BMXBMI)) # no missing BMI dim(analytic.data1) ## [1] 9055 5 analytic.data2 &lt;- subset(analytic.data1, RIDAGEYR &gt;= 20) # Age &gt;= 20 dim(analytic.data2) ## [1] 5520 5 table(analytic.data2$RIDEXPRG,useNA = &quot;always&quot;) ## ## Yes, positive lab pregnancy test The participant was not pregnant ## 65 1143 ## Cannot ascertain if the particip &lt;NA&gt; ## 44 4268 analytic.data3 &lt;- subset(analytic.data2, # Pregnant women excluded is.na(RIDEXPRG) | RIDEXPRG != &quot;Yes, positive lab pregnancy test&quot;) dim(analytic.data3) ## [1] 5455 5 7.6 Recoding variables Recode similar to the JAMA paper by Flegal et al. (2016) (see above) analytic.data3$AgeCat&lt;-cut(analytic.data3$RIDAGEYR, c(0,20,40,60,Inf), right = FALSE) analytic.data3$Gender &lt;- car::recode(analytic.data3$RIAGENDR, &quot;&#39;1&#39;=&#39;Male&#39;; &#39;2&#39;=&#39;Female&#39;&quot;) table(analytic.data3$Gender,useNA = &quot;always&quot;) ## ## Female Male &lt;NA&gt; ## 2817 2638 0 analytic.data3$Race &lt;- car::recode(analytic.data3$RIDRETH3, &quot;c(&#39;Mexican American&#39;, &#39;Other Hispanic&#39;)=&#39;Hispanic&#39;; &#39;Non-Hispanic White&#39;=&#39;White&#39;; &#39;Non-Hispanic Black&#39;=&#39;Black&#39;; &#39;Non-Hispanic Asian&#39;=&#39;Asian&#39;; else=NA&quot;) analytic.data3$Race &lt;- factor(analytic.data3$Race, levels = c(&#39;White&#39;, &#39;Black&#39;, &#39;Asian&#39;, &#39;Hispanic&#39;)) 7.7 Reproducing Table 1 Compare with Table 1 with(analytic.data3, table(AgeCat,Gender)) ## Gender ## AgeCat Female Male ## [0,20) 0 0 ## [20,40) 901 909 ## [40,60) 999 897 ## [60,Inf) 917 832 apply(with(analytic.data3, table(AgeCat,Gender)),1,sum) ## [0,20) [20,40) [40,60) [60,Inf) ## 0 1810 1896 1749 with(analytic.data3, table(AgeCat,Race)) ## Race ## AgeCat White Black Asian Hispanic ## [0,20) 0 0 0 0 ## [20,40) 734 362 216 412 ## [40,60) 759 383 251 449 ## [60,Inf) 850 370 156 353 analytic.data3m &lt;- subset(analytic.data3, Gender == &quot;Male&quot;) with(analytic.data3m, table(AgeCat,Race)) ## Race ## AgeCat White Black Asian Hispanic ## [0,20) 0 0 0 0 ## [20,40) 386 182 106 189 ## [40,60) 360 179 120 215 ## [60,Inf) 384 195 74 169 analytic.data3f &lt;- subset(analytic.data3, Gender == &quot;Female&quot;) with(analytic.data3f, table(AgeCat,Race)) ## Race ## AgeCat White Black Asian Hispanic ## [0,20) 0 0 0 0 ## [20,40) 348 180 110 223 ## [40,60) 399 204 131 234 ## [60,Inf) 466 175 82 184 Also see Dhana (2018) for a tidyverse solution. "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
